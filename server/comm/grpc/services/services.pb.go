// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/comm/grpc/proto/services.proto

package services

import (
	commands "0xacab.org/jstuczyn/CoconutGo/server/commands"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DummyRequest struct {
	Hello                string   `protobuf:"bytes,1,opt,name=hello,proto3" json:"hello,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DummyRequest) Reset()         { *m = DummyRequest{} }
func (m *DummyRequest) String() string { return proto.CompactTextString(m) }
func (*DummyRequest) ProtoMessage()    {}
func (*DummyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b6eb38364b0bff, []int{0}
}

func (m *DummyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DummyRequest.Unmarshal(m, b)
}
func (m *DummyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DummyRequest.Marshal(b, m, deterministic)
}
func (m *DummyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DummyRequest.Merge(m, src)
}
func (m *DummyRequest) XXX_Size() int {
	return xxx_messageInfo_DummyRequest.Size(m)
}
func (m *DummyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DummyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DummyRequest proto.InternalMessageInfo

func (m *DummyRequest) GetHello() string {
	if m != nil {
		return m.Hello
	}
	return ""
}

type DummyResponse struct {
	Echo                 string   `protobuf:"bytes,1,opt,name=echo,proto3" json:"echo,omitempty"`
	World                string   `protobuf:"bytes,2,opt,name=world,proto3" json:"world,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DummyResponse) Reset()         { *m = DummyResponse{} }
func (m *DummyResponse) String() string { return proto.CompactTextString(m) }
func (*DummyResponse) ProtoMessage()    {}
func (*DummyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b6eb38364b0bff, []int{1}
}

func (m *DummyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DummyResponse.Unmarshal(m, b)
}
func (m *DummyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DummyResponse.Marshal(b, m, deterministic)
}
func (m *DummyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DummyResponse.Merge(m, src)
}
func (m *DummyResponse) XXX_Size() int {
	return xxx_messageInfo_DummyResponse.Size(m)
}
func (m *DummyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DummyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DummyResponse proto.InternalMessageInfo

func (m *DummyResponse) GetEcho() string {
	if m != nil {
		return m.Echo
	}
	return ""
}

func (m *DummyResponse) GetWorld() string {
	if m != nil {
		return m.World
	}
	return ""
}

func init() {
	proto.RegisterType((*DummyRequest)(nil), "services.dummyRequest")
	proto.RegisterType((*DummyResponse)(nil), "services.dummyResponse")
}

func init() {
	proto.RegisterFile("server/comm/grpc/proto/services.proto", fileDescriptor_e2b6eb38364b0bff)
}

var fileDescriptor_e2b6eb38364b0bff = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4b, 0x4b, 0x03, 0x31,
	0x10, 0xa6, 0xa2, 0xa5, 0x06, 0x15, 0x8c, 0xaf, 0x52, 0x2f, 0x6d, 0x51, 0xf0, 0xb4, 0x91, 0x7a,
	0x90, 0x9e, 0xc4, 0x16, 0x2c, 0x22, 0x88, 0x54, 0x10, 0xf4, 0xb6, 0x4d, 0xc6, 0x36, 0xb2, 0x9b,
	0xac, 0x93, 0xa4, 0xba, 0xfe, 0x6e, 0x7f, 0x80, 0xec, 0x23, 0xad, 0xae, 0xe2, 0x2d, 0xdf, 0x7c,
	0x0f, 0xbe, 0x21, 0x43, 0x8e, 0x0d, 0xe0, 0x1c, 0x90, 0x71, 0x1d, 0xc7, 0x6c, 0x8a, 0x09, 0x67,
	0x09, 0x6a, 0xab, 0x59, 0x36, 0x96, 0x1c, 0x4c, 0x90, 0x43, 0xda, 0xf0, 0xb8, 0xd5, 0xf9, 0x66,
	0x08, 0x95, 0x30, 0xa5, 0xde, 0xa6, 0x89, 0x17, 0x77, 0x8f, 0xc8, 0x86, 0x70, 0x71, 0x9c, 0x8e,
	0xe1, 0xd5, 0x81, 0xb1, 0x74, 0x97, 0xac, 0xcd, 0x20, 0x8a, 0x74, 0xb3, 0xd6, 0xae, 0x9d, 0xac,
	0x8f, 0x0b, 0xd0, 0xed, 0x93, 0xcd, 0x52, 0x65, 0x12, 0xad, 0x0c, 0x50, 0x4a, 0x56, 0x81, 0xcf,
	0xbc, 0x2a, 0x7f, 0x67, 0xd6, 0x37, 0x8d, 0x91, 0x68, 0xae, 0x14, 0xd6, 0x1c, 0xf4, 0x3e, 0x6b,
	0xa4, 0x7e, 0x6d, 0x8c, 0x03, 0xa4, 0x8f, 0x84, 0x8e, 0xc0, 0x3e, 0x00, 0xca, 0x67, 0xc9, 0x43,
	0x2b, 0xb5, 0xba, 0x81, 0x94, 0xb6, 0x03, 0x5f, 0x2f, 0xa8, 0x50, 0x65, 0xa7, 0x56, 0xe7, 0x1f,
	0x45, 0xd9, 0xe7, 0x82, 0x6c, 0xdd, 0xcb, 0xa9, 0xba, 0xb4, 0x16, 0xe5, 0xc4, 0x59, 0x30, 0x74,
	0x6f, 0x69, 0xca, 0x18, 0x9f, 0xb5, 0x5f, 0x1d, 0x97, 0x01, 0xb7, 0x64, 0x67, 0x10, 0x49, 0x25,
	0x2a, 0x29, 0xad, 0xa5, 0x7c, 0x41, 0xfb, 0xa8, 0xc3, 0x3f, 0xb9, 0x22, 0xaf, 0x37, 0x26, 0x8d,
	0x3b, 0xd4, 0x73, 0x29, 0x00, 0xe9, 0x15, 0xd9, 0xce, 0x7b, 0xa7, 0x43, 0x04, 0x01, 0xca, 0xca,
	0x30, 0x32, 0xf4, 0xa0, 0xb2, 0xd4, 0x62, 0xdb, 0xe6, 0x6f, 0xa2, 0xc8, 0x1c, 0xf4, 0x9f, 0xce,
	0x4f, 0xdf, 0x43, 0x1e, 0x4e, 0x02, 0x8d, 0x53, 0xf6, 0x62, 0xac, 0xe3, 0x1f, 0xa9, 0x62, 0x43,
	0xcd, 0xb5, 0x72, 0x76, 0x54, 0x1c, 0xc2, 0x8f, 0xfb, 0xf0, 0x97, 0x30, 0xa9, 0xe7, 0xbf, 0x7d,
	0xf6, 0x15, 0x00, 0x00, 0xff, 0xff, 0x65, 0x1f, 0x69, 0xbd, 0x43, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IssuerClient is the client API for Issuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuerClient interface {
	GetVerificationKey(ctx context.Context, in *commands.VerificationKeyRequest, opts ...grpc.CallOption) (*commands.VerificationKeyResponse, error)
	SignAttributes(ctx context.Context, in *commands.SignRequest, opts ...grpc.CallOption) (*commands.SignResponse, error)
	BlindSignAttributes(ctx context.Context, in *commands.BlindSignRequest, opts ...grpc.CallOption) (*commands.BlindSignResponse, error)
}

type issuerClient struct {
	cc *grpc.ClientConn
}

func NewIssuerClient(cc *grpc.ClientConn) IssuerClient {
	return &issuerClient{cc}
}

func (c *issuerClient) GetVerificationKey(ctx context.Context, in *commands.VerificationKeyRequest, opts ...grpc.CallOption) (*commands.VerificationKeyResponse, error) {
	out := new(commands.VerificationKeyResponse)
	err := c.cc.Invoke(ctx, "/services.Issuer/GetVerificationKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerClient) SignAttributes(ctx context.Context, in *commands.SignRequest, opts ...grpc.CallOption) (*commands.SignResponse, error) {
	out := new(commands.SignResponse)
	err := c.cc.Invoke(ctx, "/services.Issuer/SignAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerClient) BlindSignAttributes(ctx context.Context, in *commands.BlindSignRequest, opts ...grpc.CallOption) (*commands.BlindSignResponse, error) {
	out := new(commands.BlindSignResponse)
	err := c.cc.Invoke(ctx, "/services.Issuer/BlindSignAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerServer is the server API for Issuer service.
type IssuerServer interface {
	GetVerificationKey(context.Context, *commands.VerificationKeyRequest) (*commands.VerificationKeyResponse, error)
	SignAttributes(context.Context, *commands.SignRequest) (*commands.SignResponse, error)
	BlindSignAttributes(context.Context, *commands.BlindSignRequest) (*commands.BlindSignResponse, error)
}

func RegisterIssuerServer(s *grpc.Server, srv IssuerServer) {
	s.RegisterService(&_Issuer_serviceDesc, srv)
}

func _Issuer_GetVerificationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commands.VerificationKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).GetVerificationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Issuer/GetVerificationKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).GetVerificationKey(ctx, req.(*commands.VerificationKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issuer_SignAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commands.SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).SignAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Issuer/SignAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).SignAttributes(ctx, req.(*commands.SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issuer_BlindSignAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commands.BlindSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).BlindSignAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Issuer/BlindSignAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).BlindSignAttributes(ctx, req.(*commands.BlindSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Issuer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.Issuer",
	HandlerType: (*IssuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVerificationKey",
			Handler:    _Issuer_GetVerificationKey_Handler,
		},
		{
			MethodName: "SignAttributes",
			Handler:    _Issuer_SignAttributes_Handler,
		},
		{
			MethodName: "BlindSignAttributes",
			Handler:    _Issuer_BlindSignAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/comm/grpc/proto/services.proto",
}

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProviderClient interface {
	VerifyCredentials(ctx context.Context, in *commands.VerifyRequest, opts ...grpc.CallOption) (*commands.VerifyResponse, error)
}

type providerClient struct {
	cc *grpc.ClientConn
}

func NewProviderClient(cc *grpc.ClientConn) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) VerifyCredentials(ctx context.Context, in *commands.VerifyRequest, opts ...grpc.CallOption) (*commands.VerifyResponse, error) {
	out := new(commands.VerifyResponse)
	err := c.cc.Invoke(ctx, "/services.Provider/VerifyCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
type ProviderServer interface {
	VerifyCredentials(context.Context, *commands.VerifyRequest) (*commands.VerifyResponse, error)
}

func RegisterProviderServer(s *grpc.Server, srv ProviderServer) {
	s.RegisterService(&_Provider_serviceDesc, srv)
}

func _Provider_VerifyCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commands.VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).VerifyCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Provider/VerifyCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).VerifyCredentials(ctx, req.(*commands.VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyCredentials",
			Handler:    _Provider_VerifyCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/comm/grpc/proto/services.proto",
}
