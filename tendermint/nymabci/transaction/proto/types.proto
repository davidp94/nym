syntax = "proto3";
import "crypto/coconut/scheme/proto/types.proto";

package transaction;
option go_package = "0xacab.org/jstuczyn/CoconutGo/tendermint/nymabci/transaction";

message NewAccountRequest {
    // Public Key of the user used to derive account address and validate signature
    bytes PublicKey = 1; 
    // represents some optional credential from an IP if required
    bytes Credential = 2; 
    // Signature on request to confirm its validity + asserts knowledge of private key
    bytes Sig = 3; 
}

message AccountTransferRequest {
    // Used to validate signature + determine source address
    bytes SourcePublicKey = 1;
    // Used to determine target address
    bytes TargetPublicKey = 2; 
    // Ammount to be transferred 
    uint64 Ammount = 3; 
    // TODO: if this is going to stay past debug, perhaps some field indicating max fee?
    // TODO: if this is going to stay past debug, we need nonce to prevent replay attacks
    // Signature on request to confirm its validitiy
    bytes Sig = 4; 
}


// We have defined similar messages before for the grpc provider, however, we can't rely on their definitions 
// in case something changed here (or there) 
message VerifyCoconutCredentialRequest {
    coconut.ProtoSignature sig = 1;
    repeated bytes pubM = 2;
}

// message TransferToHoldingRequest {
//     // Used to indicate which particular IA is requesting it; for simplifying validation and auditing purposes
//     bytes IAPublicKey = 1;
//     // Which user's funds should be moved
//     bytes ClientPublicKey = 2;
//     // Ammount to move
//     uint64 Ammount = 3;
//     // Commitment to attributes the credential, ensures uniquness of request
//     bytes Commitment = 4;
//     // To check if the user really wanted the transfer to happen
//     bytes ClientSig = 5;
//     // To authorise the transfer
//     bytes IASig = 6;

// }