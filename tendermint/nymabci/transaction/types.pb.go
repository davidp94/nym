// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tendermint/nymabci/transaction/proto/types.proto

package transaction

import (
	scheme "0xacab.org/jstuczyn/CoconutGo/crypto/coconut/scheme"
	_ "0xacab.org/jstuczyn/CoconutGo/crypto/elgamal"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewAccountRequest struct {
	// Public Key of the user used to derive account address and validate signature
	Address []byte `protobuf:"bytes,1,opt,name=Address,json=address,proto3" json:"Address,omitempty"`
	// represents some optional credential from an IP if required
	Credential []byte `protobuf:"bytes,2,opt,name=Credential,json=credential,proto3" json:"Credential,omitempty"`
	// Signature on request to confirm its validity + asserts knowledge of private key
	Sig                  []byte   `protobuf:"bytes,3,opt,name=Sig,json=sig,proto3" json:"Sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewAccountRequest) Reset()         { *m = NewAccountRequest{} }
func (m *NewAccountRequest) String() string { return proto.CompactTextString(m) }
func (*NewAccountRequest) ProtoMessage()    {}
func (*NewAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{0}
}

func (m *NewAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewAccountRequest.Unmarshal(m, b)
}
func (m *NewAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewAccountRequest.Marshal(b, m, deterministic)
}
func (m *NewAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAccountRequest.Merge(m, src)
}
func (m *NewAccountRequest) XXX_Size() int {
	return xxx_messageInfo_NewAccountRequest.Size(m)
}
func (m *NewAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewAccountRequest proto.InternalMessageInfo

func (m *NewAccountRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NewAccountRequest) GetCredential() []byte {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *NewAccountRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

// DEBUG
type AccountTransferRequest struct {
	// Used to validate signature + determine source address
	SourceAddress []byte `protobuf:"bytes,1,opt,name=SourceAddress,json=sourceAddress,proto3" json:"SourceAddress,omitempty"`
	// Used to determine target address
	TargetAddress []byte `protobuf:"bytes,2,opt,name=TargetAddress,json=targetAddress,proto3" json:"TargetAddress,omitempty"`
	// Amount to be transferred
	Amount uint64 `protobuf:"varint,3,opt,name=Amount,json=amount,proto3" json:"Amount,omitempty"`
	// While this function will only be available in debug and hence a nonce is really not needed,
	// I figured I should include it anyway as it's a good practice + will need to figure out a proper
	// nonce system anyway.
	Nonce []byte `protobuf:"bytes,4,opt,name=Nonce,json=nonce,proto3" json:"Nonce,omitempty"`
	// Signature on request to confirm its validitiy
	Sig                  []byte   `protobuf:"bytes,5,opt,name=Sig,json=sig,proto3" json:"Sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountTransferRequest) Reset()         { *m = AccountTransferRequest{} }
func (m *AccountTransferRequest) String() string { return proto.CompactTextString(m) }
func (*AccountTransferRequest) ProtoMessage()    {}
func (*AccountTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{1}
}

func (m *AccountTransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountTransferRequest.Unmarshal(m, b)
}
func (m *AccountTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountTransferRequest.Marshal(b, m, deterministic)
}
func (m *AccountTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountTransferRequest.Merge(m, src)
}
func (m *AccountTransferRequest) XXX_Size() int {
	return xxx_messageInfo_AccountTransferRequest.Size(m)
}
func (m *AccountTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountTransferRequest proto.InternalMessageInfo

func (m *AccountTransferRequest) GetSourceAddress() []byte {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

func (m *AccountTransferRequest) GetTargetAddress() []byte {
	if m != nil {
		return m.TargetAddress
	}
	return nil
}

func (m *AccountTransferRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AccountTransferRequest) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *AccountTransferRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type TransferToHoldingNotification struct {
	// Derived from public key; used to identify the particular watcher
	WatcherAddress []byte `protobuf:"bytes,1,opt,name=WatcherAddress,json=watcherAddress,proto3" json:"WatcherAddress,omitempty"`
	// Ethereum address of the client
	ClientAddress []byte `protobuf:"bytes,2,opt,name=ClientAddress,json=clientAddress,proto3" json:"ClientAddress,omitempty"`
	// While right now it's completely unrequired as there is only a single holding account, it might be useful
	// to have this information in the future if we decided to monitor multiple chains or have multiple holding accounts
	// for example on epoch changes.
	HoldingAddress []byte `protobuf:"bytes,3,opt,name=HoldingAddress,json=holdingAddress,proto3" json:"HoldingAddress,omitempty"`
	// Amount transferred by the client to the holding account.
	Amount int64 `protobuf:"varint,4,opt,name=Amount,json=amount,proto3" json:"Amount,omitempty"`
	// Hash of the transaction in which the transfer occured.
	// Used to distinguish from multiple transfers the client might have done.
	TxHash []byte `protobuf:"bytes,5,opt,name=TxHash,json=txHash,proto3" json:"TxHash,omitempty"`
	// Signature on the entire message done with the watcher's key.
	Sig                  []byte   `protobuf:"bytes,6,opt,name=Sig,json=sig,proto3" json:"Sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferToHoldingNotification) Reset()         { *m = TransferToHoldingNotification{} }
func (m *TransferToHoldingNotification) String() string { return proto.CompactTextString(m) }
func (*TransferToHoldingNotification) ProtoMessage()    {}
func (*TransferToHoldingNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{2}
}

func (m *TransferToHoldingNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferToHoldingNotification.Unmarshal(m, b)
}
func (m *TransferToHoldingNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferToHoldingNotification.Marshal(b, m, deterministic)
}
func (m *TransferToHoldingNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferToHoldingNotification.Merge(m, src)
}
func (m *TransferToHoldingNotification) XXX_Size() int {
	return xxx_messageInfo_TransferToHoldingNotification.Size(m)
}
func (m *TransferToHoldingNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferToHoldingNotification.DiscardUnknown(m)
}

var xxx_messageInfo_TransferToHoldingNotification proto.InternalMessageInfo

func (m *TransferToHoldingNotification) GetWatcherAddress() []byte {
	if m != nil {
		return m.WatcherAddress
	}
	return nil
}

func (m *TransferToHoldingNotification) GetClientAddress() []byte {
	if m != nil {
		return m.ClientAddress
	}
	return nil
}

func (m *TransferToHoldingNotification) GetHoldingAddress() []byte {
	if m != nil {
		return m.HoldingAddress
	}
	return nil
}

func (m *TransferToHoldingNotification) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransferToHoldingNotification) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *TransferToHoldingNotification) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type CredentialRequest struct {
	// Ethereum address of the client
	ClientAddress []byte `protobuf:"bytes,1,opt,name=ClientAddress,json=clientAddress,proto3" json:"ClientAddress,omitempty"`
	// While right now it's completely unrequired as there is only a single holding account, it might be useful
	// to have this information in the future if we decided to monitor multiple chains or have multiple holding accounts
	// for example on epoch changes.
	HoldingAddress []byte `protobuf:"bytes,2,opt,name=HoldingAddress,json=holdingAddress,proto3" json:"HoldingAddress,omitempty"`
	// All the cryptographic materials required by issuers to perform a blind sign
	CryptoMaterials *scheme.BlindSignMaterials `protobuf:"bytes,3,opt,name=CryptoMaterials,json=cryptoMaterials,proto3" json:"CryptoMaterials,omitempty"`
	// Value of the credential. While it is included in a BIG form in CryptoMaterials, it's easier to operate on it,
	// when it's an int
	Value int32 `protobuf:"varint,4,opt,name=Value,json=value,proto3" json:"Value,omitempty"`
	// Signature on entire request with client's ethereum key (so that client's address could be used to verify it)
	Sig                  []byte   `protobuf:"bytes,5,opt,name=Sig,json=sig,proto3" json:"Sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CredentialRequest) Reset()         { *m = CredentialRequest{} }
func (m *CredentialRequest) String() string { return proto.CompactTextString(m) }
func (*CredentialRequest) ProtoMessage()    {}
func (*CredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{3}
}

func (m *CredentialRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CredentialRequest.Unmarshal(m, b)
}
func (m *CredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CredentialRequest.Marshal(b, m, deterministic)
}
func (m *CredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialRequest.Merge(m, src)
}
func (m *CredentialRequest) XXX_Size() int {
	return xxx_messageInfo_CredentialRequest.Size(m)
}
func (m *CredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialRequest proto.InternalMessageInfo

func (m *CredentialRequest) GetClientAddress() []byte {
	if m != nil {
		return m.ClientAddress
	}
	return nil
}

func (m *CredentialRequest) GetHoldingAddress() []byte {
	if m != nil {
		return m.HoldingAddress
	}
	return nil
}

func (m *CredentialRequest) GetCryptoMaterials() *scheme.BlindSignMaterials {
	if m != nil {
		return m.CryptoMaterials
	}
	return nil
}

func (m *CredentialRequest) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CredentialRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterType((*NewAccountRequest)(nil), "transaction.NewAccountRequest")
	proto.RegisterType((*AccountTransferRequest)(nil), "transaction.AccountTransferRequest")
	proto.RegisterType((*TransferToHoldingNotification)(nil), "transaction.TransferToHoldingNotification")
	proto.RegisterType((*CredentialRequest)(nil), "transaction.CredentialRequest")
}

func init() {
	proto.RegisterFile("tendermint/nymabci/transaction/proto/types.proto", fileDescriptor_ffb862c5130efc92)
}

var fileDescriptor_ffb862c5130efc92 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x55, 0xd6, 0x25, 0x93, 0x3c, 0xda, 0xb1, 0x08, 0x55, 0xd1, 0x10, 0x68, 0x9a, 0x10, 0xf0,
	0x14, 0x4f, 0xf0, 0x8a, 0x90, 0xba, 0x0a, 0xb1, 0x17, 0xfa, 0x90, 0x56, 0x20, 0xf1, 0x82, 0x5c,
	0xe7, 0x2e, 0x35, 0x72, 0xec, 0x62, 0xdf, 0xb0, 0x95, 0xef, 0xe1, 0x83, 0x78, 0xe3, 0x77, 0x90,
	0x9d, 0xa4, 0x4d, 0x28, 0x9a, 0x78, 0xcb, 0x3d, 0x3e, 0xbe, 0xe7, 0x1c, 0xdf, 0x1b, 0x72, 0x89,
	0xa0, 0x72, 0x30, 0xa5, 0x50, 0x48, 0xd5, 0xa6, 0x64, 0x4b, 0x2e, 0x28, 0x1a, 0xa6, 0x2c, 0xe3,
	0x28, 0xb4, 0xa2, 0x6b, 0xa3, 0x51, 0x53, 0xdc, 0xac, 0xc1, 0xa6, 0xfe, 0x3b, 0x3e, 0xee, 0x1c,
	0x9f, 0xbd, 0xe0, 0x66, 0xb3, 0x46, 0x4d, 0xb9, 0xe6, 0x5a, 0x55, 0x48, 0x2d, 0x5f, 0x41, 0x09,
	0xfb, 0xb7, 0xce, 0xd2, 0x7b, 0x89, 0x55, 0xb9, 0x94, 0x60, 0xba, 0xfc, 0xf3, 0x86, 0x0f, 0xb2,
	0x60, 0x25, 0x93, 0xfb, 0x1d, 0x2f, 0xbe, 0x90, 0xd3, 0x19, 0xdc, 0x4e, 0x38, 0xd7, 0x95, 0xc2,
	0x0c, 0xbe, 0x55, 0x60, 0x31, 0x4e, 0xc8, 0xd1, 0x24, 0xcf, 0x0d, 0x58, 0x9b, 0x04, 0xe7, 0xc1,
	0xcb, 0x07, 0xd9, 0x11, 0xab, 0xcb, 0xf8, 0x29, 0x21, 0x53, 0x03, 0x39, 0x28, 0x14, 0x4c, 0x26,
	0x07, 0xfe, 0x90, 0xf0, 0x2d, 0x12, 0x3f, 0x24, 0x83, 0xb9, 0x28, 0x92, 0x81, 0x3f, 0x18, 0x58,
	0x51, 0x5c, 0xfc, 0x0c, 0xc8, 0xb8, 0x69, 0xbf, 0x70, 0x91, 0x6f, 0xc0, 0xb4, 0x32, 0xcf, 0xc8,
	0x70, 0xae, 0x2b, 0xc3, 0xa1, 0x2f, 0x36, 0xb4, 0x5d, 0xd0, 0xb1, 0x16, 0xcc, 0x14, 0x80, 0x2d,
	0xab, 0x56, 0x1d, 0x62, 0x17, 0x8c, 0xc7, 0x24, 0x9a, 0x94, 0x4e, 0xc4, 0x6b, 0x1f, 0x66, 0x11,
	0xf3, 0x55, 0xfc, 0x88, 0x84, 0x33, 0xad, 0x38, 0x24, 0x87, 0xfe, 0x56, 0xa8, 0x5c, 0xd1, 0xda,
	0x0c, 0x77, 0x36, 0x7f, 0x07, 0xe4, 0x49, 0xeb, 0x6f, 0xa1, 0xaf, 0xb5, 0xcc, 0x85, 0x2a, 0x66,
	0x1a, 0xc5, 0x8d, 0xe0, 0xcc, 0x0d, 0x29, 0x7e, 0x4e, 0x46, 0x9f, 0x18, 0xf2, 0x15, 0x98, 0xbe,
	0xdd, 0xd1, 0x6d, 0x0f, 0x75, 0x7e, 0xa7, 0x52, 0x80, 0xfa, 0xdb, 0x2f, 0xef, 0x82, 0xae, 0x5b,
	0x23, 0xd2, 0xd2, 0xea, 0x37, 0x1b, 0xad, 0x7a, 0x68, 0x27, 0x97, 0x0b, 0x30, 0xd8, 0xe6, 0x1a,
	0x93, 0x68, 0x71, 0x77, 0xcd, 0xec, 0xaa, 0x09, 0x11, 0xa1, 0xaf, 0xda, 0x64, 0xd1, 0x2e, 0xd9,
	0xaf, 0x80, 0x9c, 0xee, 0x66, 0xd6, 0x79, 0xfb, 0xbe, 0xcb, 0xe0, 0xff, 0x5c, 0x1e, 0xfc, 0xd3,
	0xe5, 0x3b, 0x72, 0x32, 0xf5, 0x9b, 0xf6, 0x81, 0x21, 0x18, 0xc1, 0x64, 0x1d, 0xe7, 0xf8, 0xd5,
	0xe3, 0xb4, 0x59, 0xd5, 0xf4, 0x4a, 0x0a, 0x95, 0xcf, 0x45, 0xa1, 0xb6, 0x94, 0xec, 0x84, 0xf7,
	0xef, 0xb8, 0x61, 0x7d, 0x64, 0xb2, 0xaa, 0x87, 0x15, 0x66, 0xe1, 0x77, 0x57, 0xec, 0x0f, 0xeb,
	0xea, 0xed, 0xe7, 0x37, 0x97, 0x77, 0x8c, 0xb3, 0x65, 0xaa, 0x4d, 0x41, 0xbf, 0x5a, 0xac, 0xf8,
	0x8f, 0x8d, 0xa2, 0xd3, 0x5a, 0xea, 0xbd, 0xa6, 0xf7, 0xff, 0x8e, 0xcb, 0xc8, 0xef, 0xfe, 0xeb,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x9f, 0x94, 0xc1, 0xb7, 0x03, 0x00, 0x00,
}
