// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tendermint/nymabci/transaction/proto/types.proto

package transaction

import (
	scheme "0xacab.org/jstuczyn/CoconutGo/crypto/coconut/scheme"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewAccountRequest struct {
	// Public Key of the user used to derive account address and validate signature
	PublicKey []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	// represents some optional credential from an IP if required
	Credential []byte `protobuf:"bytes,2,opt,name=Credential,proto3" json:"Credential,omitempty"`
	// Signature on request to confirm its validity + asserts knowledge of private key
	Sig                  []byte   `protobuf:"bytes,3,opt,name=Sig,proto3" json:"Sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewAccountRequest) Reset()         { *m = NewAccountRequest{} }
func (m *NewAccountRequest) String() string { return proto.CompactTextString(m) }
func (*NewAccountRequest) ProtoMessage()    {}
func (*NewAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{0}
}

func (m *NewAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewAccountRequest.Unmarshal(m, b)
}
func (m *NewAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewAccountRequest.Marshal(b, m, deterministic)
}
func (m *NewAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAccountRequest.Merge(m, src)
}
func (m *NewAccountRequest) XXX_Size() int {
	return xxx_messageInfo_NewAccountRequest.Size(m)
}
func (m *NewAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewAccountRequest proto.InternalMessageInfo

func (m *NewAccountRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *NewAccountRequest) GetCredential() []byte {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *NewAccountRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type AccountTransferRequest struct {
	// Used to validate signature + determine source address
	SourcePublicKey []byte `protobuf:"bytes,1,opt,name=SourcePublicKey,proto3" json:"SourcePublicKey,omitempty"`
	// Used to determine target address
	TargetPublicKey []byte `protobuf:"bytes,2,opt,name=TargetPublicKey,proto3" json:"TargetPublicKey,omitempty"`
	// Amount to be transferred
	Amount uint64 `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	// TODO: if this is going to stay past debug, perhaps some field indicating max fee?
	// TODO: if this is going to stay past debug, we need nonce to prevent replay attacks
	// Signature on request to confirm its validitiy
	Sig                  []byte   `protobuf:"bytes,4,opt,name=Sig,proto3" json:"Sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountTransferRequest) Reset()         { *m = AccountTransferRequest{} }
func (m *AccountTransferRequest) String() string { return proto.CompactTextString(m) }
func (*AccountTransferRequest) ProtoMessage()    {}
func (*AccountTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{1}
}

func (m *AccountTransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountTransferRequest.Unmarshal(m, b)
}
func (m *AccountTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountTransferRequest.Marshal(b, m, deterministic)
}
func (m *AccountTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountTransferRequest.Merge(m, src)
}
func (m *AccountTransferRequest) XXX_Size() int {
	return xxx_messageInfo_AccountTransferRequest.Size(m)
}
func (m *AccountTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountTransferRequest proto.InternalMessageInfo

func (m *AccountTransferRequest) GetSourcePublicKey() []byte {
	if m != nil {
		return m.SourcePublicKey
	}
	return nil
}

func (m *AccountTransferRequest) GetTargetPublicKey() []byte {
	if m != nil {
		return m.TargetPublicKey
	}
	return nil
}

func (m *AccountTransferRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AccountTransferRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type DepositCoconutCredentialRequest struct {
	// The actual credential
	Sig *scheme.ProtoSignature `protobuf:"bytes,1,opt,name=Sig,proto3" json:"Sig,omitempty"`
	// The public attributes in credential. Note that pubM[0] = H(value)
	PubM [][]byte `protobuf:"bytes,2,rep,name=PubM,proto3" json:"PubM,omitempty"`
	// Crypto materials to verify the credential + required NIZK
	Theta *scheme.ProtoThetaTumbler `protobuf:"bytes,3,opt,name=Theta,proto3" json:"Theta,omitempty"`
	// Value of the credential
	Value int32 `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
	// Address of the merchant to which the proof is bound
	MerchantAddress      []byte   `protobuf:"bytes,5,opt,name=MerchantAddress,proto3" json:"MerchantAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositCoconutCredentialRequest) Reset()         { *m = DepositCoconutCredentialRequest{} }
func (m *DepositCoconutCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*DepositCoconutCredentialRequest) ProtoMessage()    {}
func (*DepositCoconutCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{2}
}

func (m *DepositCoconutCredentialRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositCoconutCredentialRequest.Unmarshal(m, b)
}
func (m *DepositCoconutCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositCoconutCredentialRequest.Marshal(b, m, deterministic)
}
func (m *DepositCoconutCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositCoconutCredentialRequest.Merge(m, src)
}
func (m *DepositCoconutCredentialRequest) XXX_Size() int {
	return xxx_messageInfo_DepositCoconutCredentialRequest.Size(m)
}
func (m *DepositCoconutCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositCoconutCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositCoconutCredentialRequest proto.InternalMessageInfo

func (m *DepositCoconutCredentialRequest) GetSig() *scheme.ProtoSignature {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *DepositCoconutCredentialRequest) GetPubM() [][]byte {
	if m != nil {
		return m.PubM
	}
	return nil
}

func (m *DepositCoconutCredentialRequest) GetTheta() *scheme.ProtoThetaTumbler {
	if m != nil {
		return m.Theta
	}
	return nil
}

func (m *DepositCoconutCredentialRequest) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DepositCoconutCredentialRequest) GetMerchantAddress() []byte {
	if m != nil {
		return m.MerchantAddress
	}
	return nil
}

// TODO: remove in next iteration - it was proto msg for testing purposes anyway
// We have defined similar messages before for the grpc provider, however, we can't rely on their definitions
// in case something changed here (or there)
type VerifyCoconutCredentialRequest struct {
	Sig                  *scheme.ProtoSignature `protobuf:"bytes,1,opt,name=Sig,proto3" json:"Sig,omitempty"`
	PubM                 [][]byte               `protobuf:"bytes,2,rep,name=PubM,proto3" json:"PubM,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VerifyCoconutCredentialRequest) Reset()         { *m = VerifyCoconutCredentialRequest{} }
func (m *VerifyCoconutCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyCoconutCredentialRequest) ProtoMessage()    {}
func (*VerifyCoconutCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{3}
}

func (m *VerifyCoconutCredentialRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyCoconutCredentialRequest.Unmarshal(m, b)
}
func (m *VerifyCoconutCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyCoconutCredentialRequest.Marshal(b, m, deterministic)
}
func (m *VerifyCoconutCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyCoconutCredentialRequest.Merge(m, src)
}
func (m *VerifyCoconutCredentialRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyCoconutCredentialRequest.Size(m)
}
func (m *VerifyCoconutCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyCoconutCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyCoconutCredentialRequest proto.InternalMessageInfo

func (m *VerifyCoconutCredentialRequest) GetSig() *scheme.ProtoSignature {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *VerifyCoconutCredentialRequest) GetPubM() [][]byte {
	if m != nil {
		return m.PubM
	}
	return nil
}

type TransferToHoldingRequest struct {
	// While Public Key is enough to identify IA and verify signature, attaching ID significantly simplifies the lookup
	// at abci side. If PK was attached, abci would need to compare it with all stored keys until a match was found, now
	// it obtains key in constant time and uses stored key to verify the signature
	IAID uint32 `protobuf:"varint,1,opt,name=IAID,proto3" json:"IAID,omitempty"`
	// Which user's funds should be moved
	ClientPublicKey []byte `protobuf:"bytes,2,opt,name=ClientPublicKey,proto3" json:"ClientPublicKey,omitempty"`
	// Amount to move
	Amount uint64 `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	// Commitment to attributes the credential, ensures uniqueness of request
	Commitment []byte `protobuf:"bytes,4,opt,name=Commitment,proto3" json:"Commitment,omitempty"`
	// To check if the user really wanted the transfer to happen
	// It is done on {ClientPublicKey, Ammount, Commitment}
	ClientSig []byte `protobuf:"bytes,5,opt,name=ClientSig,proto3" json:"ClientSig,omitempty"`
	// To authorise the transfer
	// It is done on {IAID, ClientPublicKey, Ammount, Commitment, ClientSig}
	IASig                []byte   `protobuf:"bytes,6,opt,name=IASig,proto3" json:"IASig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferToHoldingRequest) Reset()         { *m = TransferToHoldingRequest{} }
func (m *TransferToHoldingRequest) String() string { return proto.CompactTextString(m) }
func (*TransferToHoldingRequest) ProtoMessage()    {}
func (*TransferToHoldingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffb862c5130efc92, []int{4}
}

func (m *TransferToHoldingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferToHoldingRequest.Unmarshal(m, b)
}
func (m *TransferToHoldingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferToHoldingRequest.Marshal(b, m, deterministic)
}
func (m *TransferToHoldingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferToHoldingRequest.Merge(m, src)
}
func (m *TransferToHoldingRequest) XXX_Size() int {
	return xxx_messageInfo_TransferToHoldingRequest.Size(m)
}
func (m *TransferToHoldingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferToHoldingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferToHoldingRequest proto.InternalMessageInfo

func (m *TransferToHoldingRequest) GetIAID() uint32 {
	if m != nil {
		return m.IAID
	}
	return 0
}

func (m *TransferToHoldingRequest) GetClientPublicKey() []byte {
	if m != nil {
		return m.ClientPublicKey
	}
	return nil
}

func (m *TransferToHoldingRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransferToHoldingRequest) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *TransferToHoldingRequest) GetClientSig() []byte {
	if m != nil {
		return m.ClientSig
	}
	return nil
}

func (m *TransferToHoldingRequest) GetIASig() []byte {
	if m != nil {
		return m.IASig
	}
	return nil
}

func init() {
	proto.RegisterType((*NewAccountRequest)(nil), "transaction.NewAccountRequest")
	proto.RegisterType((*AccountTransferRequest)(nil), "transaction.AccountTransferRequest")
	proto.RegisterType((*DepositCoconutCredentialRequest)(nil), "transaction.DepositCoconutCredentialRequest")
	proto.RegisterType((*VerifyCoconutCredentialRequest)(nil), "transaction.VerifyCoconutCredentialRequest")
	proto.RegisterType((*TransferToHoldingRequest)(nil), "transaction.TransferToHoldingRequest")
}

func init() {
	proto.RegisterFile("tendermint/nymabci/transaction/proto/types.proto", fileDescriptor_ffb862c5130efc92)
}

var fileDescriptor_ffb862c5130efc92 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcf, 0x8e, 0xd3, 0x3e,
	0x10, 0x56, 0xb7, 0x7f, 0xa4, 0x9f, 0xbb, 0x3f, 0x01, 0x16, 0x5a, 0xa2, 0x0a, 0x2d, 0xab, 0x5e,
	0x28, 0x97, 0xa6, 0x5a, 0xae, 0x08, 0x29, 0x74, 0x25, 0xa8, 0xd0, 0xa2, 0x2a, 0x8d, 0xf6, 0xc0,
	0x05, 0x39, 0xce, 0x6c, 0x6a, 0x94, 0xd8, 0xc5, 0x19, 0x0b, 0xc2, 0x83, 0xf0, 0x44, 0x3c, 0x01,
	0x4f, 0x84, 0x6c, 0x27, 0x4a, 0xc9, 0x8a, 0xbd, 0x71, 0x1b, 0x7f, 0x33, 0x9e, 0xf9, 0xbe, 0x6f,
	0x6c, 0xb2, 0x42, 0x90, 0x19, 0xe8, 0x52, 0x48, 0x0c, 0x65, 0x5d, 0xb2, 0x94, 0x8b, 0x10, 0x35,
	0x93, 0x15, 0xe3, 0x28, 0x94, 0x0c, 0x0f, 0x5a, 0xa1, 0x0a, 0xb1, 0x3e, 0x40, 0xb5, 0x74, 0x31,
	0x9d, 0x1e, 0xa5, 0x67, 0xcf, 0xb9, 0xae, 0x0f, 0xa8, 0x42, 0xae, 0xb8, 0x92, 0x06, 0xc3, 0x8a,
	0xef, 0xa1, 0x84, 0xbb, 0xb7, 0x66, 0xcb, 0x7b, 0x0b, 0x4d, 0x99, 0x16, 0xa0, 0x8f, 0xea, 0xe7,
	0x9c, 0x3c, 0xfa, 0x00, 0x5f, 0x23, 0xce, 0x95, 0x91, 0x18, 0xc3, 0x17, 0x03, 0x15, 0xd2, 0xa7,
	0xe4, 0xbf, 0xad, 0x49, 0x0b, 0xc1, 0xdf, 0x43, 0x1d, 0x0c, 0x2e, 0x06, 0x8b, 0xd3, 0xb8, 0x03,
	0xe8, 0x39, 0x21, 0x6b, 0x0d, 0x19, 0x48, 0x14, 0xac, 0x08, 0x4e, 0x5c, 0xfa, 0x08, 0xa1, 0x0f,
	0xc9, 0x70, 0x27, 0xf2, 0x60, 0xe8, 0x12, 0x36, 0x9c, 0xff, 0x18, 0x90, 0xb3, 0x66, 0x44, 0x62,
	0x45, 0xdd, 0x82, 0x6e, 0x47, 0x2d, 0xc8, 0x83, 0x9d, 0x32, 0x9a, 0x43, 0x7f, 0x60, 0x1f, 0xb6,
	0x95, 0x09, 0xd3, 0x39, 0x60, 0x57, 0xe9, 0x67, 0xf7, 0x61, 0x7a, 0x46, 0x26, 0x51, 0x69, 0x87,
	0x39, 0x0e, 0xa3, 0xb8, 0x39, 0xb5, 0xc4, 0x46, 0x1d, 0xb1, 0x5f, 0x03, 0xf2, 0xec, 0x0a, 0x0e,
	0xaa, 0x12, 0xb8, 0xf6, 0x86, 0x75, 0x3a, 0x5a, 0x86, 0x2f, 0xfc, 0x2d, 0xcb, 0x6a, 0x7a, 0xf9,
	0x64, 0xd9, 0x18, 0xbb, 0xdc, 0x5a, 0xfb, 0x76, 0x22, 0x97, 0x0c, 0x8d, 0x06, 0xd7, 0x8e, 0x52,
	0x32, 0xda, 0x9a, 0xf4, 0x3a, 0x38, 0xb9, 0x18, 0x2e, 0x4e, 0x63, 0x17, 0xd3, 0x15, 0x19, 0x27,
	0x7b, 0x40, 0xe6, 0xb8, 0x4c, 0x2f, 0x67, 0x7f, 0x36, 0x70, 0xa9, 0xc4, 0xaf, 0x25, 0xf6, 0x85,
	0xf4, 0x31, 0x19, 0xdf, 0xb0, 0xc2, 0x80, 0x23, 0x3a, 0x8e, 0xfd, 0xc1, 0xca, 0xbf, 0x06, 0xcd,
	0xf7, 0x4c, 0x62, 0x94, 0x65, 0x1a, 0xaa, 0x2a, 0x18, 0x7b, 0xf9, 0x3d, 0x78, 0xfe, 0x89, 0x9c,
	0xdf, 0x80, 0x16, 0xb7, 0xf5, 0x3f, 0x92, 0x34, 0xff, 0x39, 0x20, 0x41, 0xbb, 0xc7, 0x44, 0xbd,
	0x53, 0x45, 0x26, 0x64, 0xde, 0xf6, 0xa6, 0x64, 0xb4, 0x89, 0x36, 0x57, 0xae, 0xf9, 0xff, 0xb1,
	0x8b, 0x2d, 0xf7, 0x75, 0x21, 0x40, 0xde, 0x5d, 0x5d, 0x0f, 0xfe, 0xeb, 0xea, 0xec, 0x9b, 0x53,
	0x65, 0x29, 0xb0, 0x04, 0x89, 0xcd, 0x06, 0x8f, 0x10, 0xfb, 0x62, 0x7d, 0x2b, 0xab, 0xcb, 0xfb,
	0xd2, 0x01, 0xd6, 0xd1, 0x4d, 0x64, 0x33, 0x13, 0x97, 0xf1, 0x87, 0x37, 0xaf, 0x3f, 0xbe, 0x5a,
	0x7d, 0x63, 0x9c, 0xa5, 0x4b, 0xa5, 0xf3, 0xf0, 0x73, 0x85, 0x86, 0x7f, 0xaf, 0x65, 0xd8, 0xb8,
	0xf6, 0x56, 0x85, 0xf7, 0x7f, 0xd9, 0x74, 0xe2, 0x7e, 0xd0, 0xcb, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0x15, 0x88, 0x00, 0xdb, 0x03, 0x00, 0x00,
}
